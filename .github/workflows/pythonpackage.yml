name: RunTests

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      # Use pip requirements.txt cache https://github.com/actions/cache/blob/master/examples.md#python---pip
      # Apparently you can't use cache when using pipenv (but perhaps when specifying the pipenv environment folder?)

      - name: Print environment variables (windows)
        run: |
          ls env:
        if: matrix.os == 'windows-latest'

      - name: Print python location (windows)
        run: |
          echo $env:pythonLocation
        if: matrix.os == 'windows-latest'

      - name: Install poetry
        run: |
          python -m pip install poetry

      - name: Install dependencies
        run: |
          poetry install

      - name: Test with pytest
        run: |
          poetry run pytest test

      - name: Run radon (cyclomatic complexity report)
        # './' denotes the current directory
        run: |
          poetry run radon cc ./ -a -nb

      - name: Run mypy (type checking)
        run: |
          poetry run mypy .

      - name: Build
        run: |
          poetry build
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'

      # Publish package on pypi
      - name: Publish
        continue-on-error: true
        run: |
          poetry publish --username ${{ secrets.pypi_username }} --password ${{ secrets.pypi_password }}
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7'
